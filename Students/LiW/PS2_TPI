import numpy as np
import scipy.optimize as opt
import math
import time
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
import os

# TPI
nvec = np.array([1 , 1, .2])
T = 30
A = 1
alpha = 0.35
beta = 0.442
delta = 0.6415
sigma = 3
L = nvec.sum()

# Kpath0
'''
K1 = initial aggregate capital
K_ss = steady state K
T_guess = 30
Kpath0 = [T,] vector, initial guess for time path of K
Kpath1 = [T-1,] vector, time path for K with optimised b

'''
#let b_ss = [.1, .1] to test the codes
b_ss = np.array([.1,.1])

KT = b_ss.sum()
b_init = np.array([.8 * b_ss[0], 1.1 * b_ss[1]])
K1 = b_init.sum()

# get Kpath0
def get_Kpath0(K1, KT, T, spec):
    '''
    #from GitHub

    --------------------------------------------------------------------
    This function generates a path from point K1 to point KT such that
    that the path K is a linear or quadratic function of time t.

        linear:    K = d*t + e
        quadratic: K = a*t^2 + b*t + c

    The identifying assumptions for quadratic are the following:

        (1) K1 is the value at time t=0: K1 = bvec_guess[0] + bvec_guess[1]
        (2) KT is the value at time t=T-1: KT = a*(T-1)^2 + b*(T-1) + K1
        (3) the slope of the path at t=T-1 is 0: 0 = 2*a*(T-1) + b
    --------------------------------------------------------------------
    INPUTS:
    K1 = scalar, initial value of the function K(t) at t=0
    KT = scalar, value of the function K(t) at t=T-1
    T  = integer >= 3, number of periods of the path
    spec = string, "linear" or "quadratic"

    OTHER FUNCTIONS AND FILES CALLED BY THIS FUNCTION:

    OBJECTS CREATED WITHIN FUNCTION:
    cc    = scalar, constant coefficient in quadratic function
    bb    = scalar, coefficient on t in quadratic function
    aa    = scalar, coefficient on t^2 in quadratic function
    Kpath0 = (T,) vector, parabolic Kpath from K1 to KT

    FILES CREATED BY THIS FUNCTION: None

    RETURNS: Kpath0
    --------------------------------------------------------------------
    '''

    if spec == "linear":
        Kpath0 = np.linspace(K1, KT, T)
    elif spec == "quadratic":
        cc = K1
        bb = 2 * (KT - K1) / (T - 1)
        aa = (K1 - KT) / ((T - 1) ** 2)
        Kpath0 = aa * (np.arange(0, T) ** 2) + (bb * np.arange(0, T)) + cc

    return Kpath0
    
    
# get wt 
'''
'''
Kpath0 = get_Kpath0(K1,KT,T,"quadratic")
def wt(alpha, A, L):
    wt = []
    for t in range(T):
        w = (1 - alpha) * A * (Kpath0[t] / L) ** alpha
        wt.append(w)
    return wt


# get rt = {}
def rt(alpha, A, L, delta):
    rt = []
    for t in range(T):
        r = alpha * A * (L / Kpath0[t]) ** (1 - alpha) - delta
        rt.append(r)
    return rt
    
# get bvec(b(2,t), b(3,t+1))
'''
f1 = mu(c(1,t-1)) - beta * (1+r(t)) * mu(c(2,t))
f2 = mu(c(2,t)) - beta * (1+r(t+1)) * mu(c(3,t+1))
'''
def f1(bvec):
    b2 = bvec[0]
    b3 = bvec[1]
    w = wt(alpha, A, L)
    r = rt(alpha, A, L, delta)
    f1 = np.zeros(2)
    for t in range(T+1):
        f1[0] = (w[t-2]-b2)**(-sigma)-beta*(1+r[t-1])*(w[t-1]+(1+r[t-1])*b2\
-b3)**(-sigma)
        f1[1] = (w[t-1]+(1+r[t-1])*bvec[0]-b3)**(-sigma)-\
beta*(1+r[t])*((1+r[t])*b3+0.2*w[t])**(-sigma)
    return f1

bvec = opt.fsolve(f1, [.1, .1])



# compute b(3,2)
'''
mu(c(2,1)) = beta * (1+r2) * mu(c(3,2))
'''

def f2(b_3):
    w = wt(alpha, A, L)
    r = rt(alpha, A, L, delta)
    f2 = (w[0]+(1+r[0])* b_init[0] - b_3)**(-sigma)-beta*(1+r[1])*\
((1+r[1])*b_3+0.2*w[1])**(-sigma)
    return f2

b_3 = opt.fsolve(f2, .2)


# get Kpath1
'''
Kpath1 = [KK1, KK2,..., KKT]
KKt = b(2,t) + b(3,t)
t in range (0, T)
b(2,t) = bvec[t][0]
b(3,t) = bvec[t-1][1]

'''

# compute the norm
'''
norm = (Kt - KKt) ** 2
while iter < 200 and norm > 1e**(-9)
    iter += 1

'''



















